{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/stores.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivitiyFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetail.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","config","token","store","commonStore","headers","Authorization","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","getUserActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ProfileFormValues","bio","ActivityStore","activitiesRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","x","setActivity","setPagination","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","Date","state","createActivity","attendee","newActivity","runInAction","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","ProfileStore","loadingProfile","uploading","deleting","followings","loadingFollowing","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","shortBio","length","slice","Card","Header","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","Segment","Group","Label","attached","textAlign","secondary","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","clearing","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","HomePage","isLoggedIn","MyTextArea","MySelectInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","MyDateInput","selected","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","Divider","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWiget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileForm","switchEditProfileMode","switchEditMode","profileValues","setProfileValues","editProfileMode","setEditProfileMode","panes","menuItem","pane","menu","menuPosition","onTabChange","activeIndex","objectFit","Meta","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","ActivityDashboard","ActivityForm","ActivityDetails","ProfilePage","TestError","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7549a870.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber; \r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport {Activity, ActivityFormValues} from '../models/activity';\r\nimport {history} from '../../index';\r\nimport { store } from '../stores/stores';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number) => new Promise<void>((res) => {\r\n    return setTimeout(res, delay)\r\n})\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token)\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error : AxiosError) => {    // error is for everything is not 2XX response\r\n    const {data, status, config} = error.response!; // we know that include in error.response\r\n\r\n    switch (status) {\r\n        case 400:\r\n            if( typeof data === 'string') { // this is to allow toast with bad request\r\n                toast.error(data)\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {  // if data contains errors object that is valid response from API\r\n                const modalStateErrors = [];\r\n                // we want to loop over all errors and put them into this array\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                // we want to throw this back into component\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    // url is type of string, body is type of object\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put <T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),  // passing activity as in body\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile : Partial<Profile>) => requests.put<void>('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getUserActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing?: boolean;\r\n    isHost?: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues)\r\n    {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos? : Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\nexport class  Profile implements Profile {  // no problem if we are using a same name for class and profile\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport class ProfileFormValues {\r\n    displayName: string = '';\r\n    bio?: string;\r\n\r\n    constructor(profile?: ProfileFormValues) {\r\n        if (profile) {\r\n            this.displayName = profile.displayName;\r\n            this.bio = profile.bio ?? this.bio;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string,\r\n    title: string,\r\n    category: string,\r\n    date: Date,\r\n}","import {makeAutoObservable, reaction, runInAction} from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport {format} from 'date-fns';\r\nimport { store } from './stores';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n\r\n    activitiesRegistry = new Map<String, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    \r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), // what change we want to react\r\n            () => {\r\n                this.pagingParams = new PagingParams(); // if user switch filter, we want to reset paging\r\n                this.activitiesRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value : string | Date) => {\r\n        // we want to resetPredicate but not startDate\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        // we only want user to filter activity once by once only\r\n        // 'all', 'isGoing', 'isHost'\r\n        switch (predicate) {\r\n            case 'all': \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate'); // we need to delete to trigger the change\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    } \r\n\r\n    // add compute property \r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n \r\n    // Computed function\r\n    get activitiesByDate () {\r\n\r\n        return Array.from(this.activitiesRegistry.values())\r\n        .sort((a, b) => a.date!.getTime() - b.date!.getTime()); // we know it is not gonna be null so we use !\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(this.activitiesByDate.reduce((activities, activity) => {\r\n            \r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n        }, {} as {[key: string] : Activity[]}))\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(x => {\r\n                this.setActivity(x);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            this.loadingInitial = false;\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination : Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id : string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                this.selectedActivity = activity;\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity : Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees?.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activitiesRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id : string) => {\r\n        return this.activitiesRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            console.log('New activity date::', newActivity.date)\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity : ActivityFormValues) => { \r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activitiesRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id : string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activitiesRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                    this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activitiesRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activitiesRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string, following: boolean) => {\r\n        this.activitiesRegistry.forEach((activity) => {\r\n            const attendee = activity.attendees?.find(attendee => attendee.username === username);\r\n            if (attendee) {\r\n                attendee.following = !attendee.following;\r\n                following ? attendee.followersCount++ : attendee.followersCount--;\r\n            }\r\n        })\r\n    }\r\n}","import {makeAutoObservable, runInAction} from 'mobx';\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport agent from '../../app/api/agent';\r\nimport { store } from './stores';\r\nimport {history} from '../../index';\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    // compute property\r\n    get isLoggedIn() {\r\n        return !!this.user; // if user is null no, otherwise yes\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        runInAction(() => this.user = null);\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image : string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n}","import { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { store } from './stores';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    deleting = false;\r\n    followings: Profile[] = []; // list of following or followers\r\n    loadingFollowing = false;\r\n    activeTab = 0;  // we use for reaction\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities= false;\r\n\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        // config reaction\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab === 4) {\r\n                    const predicate = (activeTab === 3) ? \"followers\" : \"following\";\r\n                    this.listFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            },\r\n            \r\n        );\r\n\r\n        \r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            // update userstore\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.deleting = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.deleting = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                if (this.profile) {\r\n                    this.profile = { ...this.profile, ...profile };\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username, following);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following = !profile.following;\r\n                        following ? profile.followersCount++ : profile.followersCount--;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    listFollowings = async (predicate: string) => {\r\n        if (!this.profile) return;\r\n\r\n        this.loadingFollowing = true;\r\n        try {\r\n            const response = await agent.Profiles.listFollowings(this.profile.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = response;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingFollowing = false)\r\n        }\r\n    }\r\n\r\n    loadActivities = async (predicate: string) => {\r\n        if (!this.profile) return;\r\n\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.getUserActivities(this.profile?.username, predicate);\r\n        \r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\n// Step 1: Create a Store interface that has ActivityStore, commonStore, userStore as a property\r\ninterface Store {\r\n    activityStore : ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\n// Step 2: Create a store that type Store\r\nexport const store : Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore : new ProfileStore(),\r\n    commentStore : new CommentStore(),\r\n}\r\n\r\n// Step 3: Create a store context\r\nexport const StoreContext = createContext(store);\r\n\r\n// Step 4: Create a simple react hook, that allow us to use our store inside our components\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import {makeAutoObservable, reaction} from 'mobx';\r\nimport {ServerError} from '../models/serverError';\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        // config reaction\r\n        // reaction is not called in the beginning. It is only called \r\n        // when token is changing, it will be called\r\n        reaction(\r\n            () => this.token,   // what we want to react\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }  \r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string|null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded= () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import {makeAutoObservable} from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import {makeAutoObservable, runInAction} from 'mobx';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\nimport {ChatComment} from '../models/comment';\r\nimport {store} from './stores';\r\n\r\nexport default class CommentStore {\r\n\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null; // this is from signalR\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    // add method for create hubConnection\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(`${process.env.REACT_APP_CHAT_URL}?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            // we want to receive all comments for this activity\r\n            this.hubConnection.on('LoadComments', (comments:ChatComment[] )=> {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        // we are formating the comment.createAt receive from database to UTC\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                })\r\n            })\r\n\r\n            // add method for receive a comment\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt)\r\n                    this.comments.unshift(comment)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    // add method for stop hub connection\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error))\r\n    }\r\n\r\n    // we want to clear comment when user disconnect to an activity\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values : any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values); // SendComment need to match the method on our server\r\n            // The server will send us \"ReceiveComment\" and we catched above\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/stores';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px', }} />\r\n                    Reactivites\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' exact name='Activities' />\r\n                <Menu.Item as={NavLink} to='/buggy' exact name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' exact positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { Reveal, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Profile } from '../../app/models/profile';\r\nimport {useStore} from '../../app/stores/stores';\r\nimport { SyntheticEvent } from 'react';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e : SyntheticEvent, username: string, following: boolean){\r\n        e.preventDefault();\r\n        if (following)\r\n            updateFollowing(username, false);\r\n        else\r\n            updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid color='teal' \r\n                    content={ profile.following ? 'Following' : 'Not Following' } \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    loading={loading}\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    onClick={e => handleFollow(e, profile.username, profile.following)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n","import {Card, Image, Icon} from 'semantic-ui-react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport {Link} from 'react-router-dom';\r\nimport {Profile} from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n\r\n    const shortBio = (profile.bio && profile.bio?.length > 40) ? profile.bio.slice(0, 40) +'...' : profile.bio;\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{shortBio}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile.followersCount <= 1 ? `${profile.followersCount} follower` : `${profile.followersCount} followers`}\r\n                <FollowButton profile={profile}/>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2,\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {\r\n                attendees.map(attendee => (\r\n                    <Popup\r\n                        hoverable\r\n                        key={attendee.username}\r\n                        trigger={\r\n                            <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                                <Image \r\n                                    size='mini' \r\n                                    circular src={attendee.image || '/assets/user.png'}\r\n                                    bordered\r\n                                    style={attendee.following ? styles : null} \r\n                                />\r\n                            </List.Item>\r\n                        }\r\n                    >\r\n                        <Popup.Content>\r\n                            <ProfileCard profile={attendee}/>\r\n                        </Popup.Content>\r\n                    </Popup>\r\n\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n})","import { Button, Item, Segment, Icon, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface Props {\r\n    activity : Activity\r\n}\r\n\r\nconst ActivityListItem = ({activity} : Props) => {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/> \r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link} \r\n                    to={`/activities/${activity.id}`} \r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItem);","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Item, Header} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/stores';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                        {activities.length === 0 \r\n                            ?(\r\n                                <Item>\r\n                                    <Item.Content>No activities</Item.Content>\r\n                                </Item>\r\n                            )\r\n                            :\r\n                            activities.map(activity => (\r\n                                <ActivityListItem key={activity.id} activity={activity} />\r\n                            ))\r\n                        }\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","import {Menu, Header} from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/stores';\r\n\r\nexport default observer(function ActivityFilters () {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n    <>\r\n        <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n            <Header icon='filter' attached color='teal' content='Filters'/>\r\n            <Menu.Item \r\n                content='All Activities' \r\n                active={predicate.has('all')}   // make it active if the predicate is set to all\r\n                onClick={() => setPredicate('all', 'true')}    \r\n            />\r\n            <Menu.Item \r\n                content=\"I'm going\" \r\n                active={predicate.has('isGoing')}   // make it active if the predicate is set to all\r\n                onClick={() => setPredicate('isGoing', 'true')}     \r\n            />\r\n            <Menu.Item \r\n                content=\"I'm hosting\" \r\n                active={predicate.has('isHost')}   // make it active if the predicate is set to all\r\n                onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar \r\n            onChange={(date) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n        />\r\n    </>\r\n    )\r\n})","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\n/**\r\n * Make it look similar to activity items\r\n * @returns \r\n */\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState, } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityList from './ActivityList';\r\nimport { useStore } from '../../../app/stores/stores';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivitiyFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\r\n\r\nfunction ActionDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { activitiesRegistry, loadActivities, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (activitiesRegistry.size <= 1)\r\n            loadActivities();\r\n    }, [loadActivities, activitiesRegistry])  // passing activityStore as an array of dependencies to avoid looping infinitely\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false))\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext\r\n                    ? (\r\n                        <>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder />\r\n                        </>\r\n                    )\r\n                    : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination /* make sure pagination is there*/\r\n                                && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActionDashboard);","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>   {/** Cast the error into boolean using !! */}\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {\r\n                meta.touched && meta.error \r\n                ? (<Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { Header, Label } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/stores';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}}  // error help us to display errors in the form\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n                .catch(error => setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={()=> \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import {Message} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any\r\n}\r\n\r\nexport default function ValidationErrors({errors} : Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i : any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { Header, } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button } from 'semantic-ui-react';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required'),\r\n        username: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n    })\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{ displayName: '', username:'', email: '', password: '', error: null}}  // error help us to display errors in the form\r\n            onSubmit={(values, {setErrors}) => userStore.register(values)\r\n                .catch(error => setErrors({error})\r\n                )}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'> {/** need error in class so error can be displayed */}\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={()=> \r\n                            <ValidationErrors errors={errors.error}/> }\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { Container, Segment, Header, Image, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                    </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>   {/** Cast the error into boolean using !! */}\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {\r\n                meta.touched && meta.error \r\n                ? (<Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import {Form, Label, Select, } from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>   {/** Cast the error into boolean using !! */}\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options} \r\n                value={field.value || null}\r\n                onChange={(e, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n                />\r\n            {\r\n                meta.touched && meta.error \r\n                ? (<Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import {Form, Label} from 'semantic-ui-react';\r\nimport { useField } from 'formik';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) { // Partial make it props optional\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>   {/** Cast the error into boolean using !! */}\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            >\r\n            </DatePicker>\r\n            {\r\n                meta.touched && meta.error \r\n                ? (<Label basic color='red'>{meta.error}</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]\r\n\r\nexport default categoryOptions;","import React, { useState, useEffect } from 'react';\r\nimport { Button,Header,Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/stores';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport {  Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {v4 as uuid} from 'uuid';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport categoryOptions from '../../../app/common/options/categoryOptions';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nfunction ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { updateActivity, createActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'), // the message\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id)\r\n                .then(activity => {\r\n                    if (activity)\r\n                        setActivity(new ActivityFormValues(activity));\r\n                })\r\n        }\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(()=> {\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })\r\n        } else {\r\n            updateActivity(activity).then(()=>{\r\n                history.push(`/activities/${activity.id}`)\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // if (loadingInitial)\r\n    //     return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'> {/*className='ui form' to get styling for form from semantic ui*/}\r\n                        <MyTextInput name='title' placeholder='Title'/>\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'    \r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);","import React from 'react';\r\nimport {Dimmer, Loader} from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/stores';\r\n\r\n// dimmed the image to have text over the image\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\n\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {\r\n                    activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button \r\n                                color={activity.isCancelled ? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading}\r\n                                />\r\n                            <Button as={Link} \r\n                                disabled={activity.isCancelled}\r\n                                to={`/manage/${activity.id}`} \r\n                                color='orange' floated='right'\r\n                            >\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n\r\n                    ) : activity.isGoing ? (\r\n                        <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button disabled={activity.isCancelled} \r\n                            loading={loading} onClick={updateAttendance} \r\n                            color='teal'\r\n                        >\r\n                            Join Activity\r\n                        </Button>\r\n                    )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps, } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/stores'\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) { // if there is an activity, make connection\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        // cleanup function, close connection when dispose component\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore])\r\n\r\n    const validationSchema = Yup.object({\r\n        body: Yup.string().required()\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map(comment => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity : {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && \r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            \r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport {  Grid,} from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/stores';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nconst ActivityDetails = () => {\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{id: string}>();\r\n\r\n    useEffect(()=> {\r\n        if (id)\r\n            loadActivity(id);\r\n        return () => {\r\n            clearSelectedActivity();\r\n        }\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />; // this is not gonna be the case, so we can just return a loading component \r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import {Header, Segment, Icon, Button} from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Opps - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities'>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport {useStore} from '../../app/stores/stores';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport {useStore} from '../../stores/stores';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Segment, Grid, Item, Header, Statistic, Divider, } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile} : Props) {\r\n\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Follower' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles : (files : any) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({setFiles} : Props) {\r\n    \r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n      })\r\n    ))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here'/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import React from 'react';\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';    // import css\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper} : Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}  // enforce square images\r\n            aspectRatio={1} // enfore square images\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={(cropper : Cropper) => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header, } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport { Cropper } from 'react-cropper';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWiget({uploadPhoto, loading} : Props) {\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.preview);\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper\r\n                        setCropper={setCropper}\r\n                        imagePreview={files[0].preview}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group width={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n        uploading, loading, setMainPhoto, deleting, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n\r\n    function handlePhotoUpload( file : Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo : Photo, e : SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e : SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                loading = {target === photo.id && deleting}\r\n                                                disabled={photo.isMain}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { useEffect, useState } from 'react';\r\nimport { Button, } from 'semantic-ui-react';\r\nimport { Formik, Form,  } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Profile, ProfileFormValues } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    profile: Profile,\r\n    switchEditMode : () => void;\r\n}\r\n\r\nexport default function ProfileForm({profile, switchEditMode: switchEditProfileMode} : Props) {\r\n\r\n    const {profileStore : {updateProfile}} = useStore();\r\n    const [profileValues, setProfileValues] = useState<ProfileFormValues>(new ProfileFormValues());\r\n    \r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (profile) {\r\n            setProfileValues(new ProfileFormValues(profile));\r\n        }\r\n    }, [profile])\r\n\r\n    const handleFormSubmit = (values : ProfileFormValues) => {\r\n        updateProfile(values).then(() => {\r\n            switchEditProfileMode();\r\n        })\r\n    }\r\n\r\n    return (\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                initialValues={profileValues}\r\n                enableReinitialize\r\n                onSubmit={(values) => handleFormSubmit(values)}>\r\n                {\r\n                    ({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                        \r\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                            <MyTextInput name='displayName' placeholder='Display Name' />\r\n                            <MyTextArea rows={6} name='bio' placeholder='Bio' />\r\n                            <Button\r\n                                disabled={isSubmitting || !isValid || !dirty}\r\n                                floated='right'\r\n                                positive\r\n                                content='Update Profile'\r\n                                loading={isSubmitting}\r\n                            />\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Grid, Header, Item, Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport ProfileForm from './ProfileForm';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileAbout({profile} : Props) {\r\n\r\n    const { profileStore : {isCurrentUser} } = useStore();\r\n\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n\r\n    const switchEditMode = () => {\r\n        setEditProfileMode(!editProfileMode);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='user' floated='left' content={`About ${profile?.displayName}`} />\r\n                    {\r\n                        isCurrentUser && <Button\r\n                            floated='right'\r\n                            content= {editProfileMode ? 'Cancel' : 'Edit Profile'}\r\n                            basic\r\n                            onClick={switchEditMode}\r\n                        />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {\r\n                        editProfileMode \r\n                        ? (<ProfileForm profile={profile} switchEditMode={switchEditMode}/>) \r\n                        : (<Item>\r\n                            <Item.Description style={{'whiteSpace': 'pre-wrap'}} content={profile?.bio} />\r\n                        </Item>)\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Grid, Tab, Header, Card } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n\r\n    const { profileStore : {followings, loadingFollowing, activeTab} } = useStore();\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowing}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='user' content={activeTab === 3 ? 'Followers' : 'Following'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default observer(function ProfileActivities() {\r\n\r\n    const { profileStore } = useStore();\r\n\r\n    const { userActivities, loadActivities, loadingActivities } = profileStore;\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n    ]\r\n\r\n    useEffect(() => {\r\n        loadActivities('future')\r\n    }, [loadActivities])\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='calendar' content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        menuPosition='left'\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => loadActivities(panes[data.activeIndex as number].pane.key)}\r\n                    >\r\n                    </Tab>\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            userActivities.map(activity => (\r\n                                <Card\r\n                                    key={activity.id}\r\n                                    as={Link}\r\n                                    to={`/activities/${activity.id}`}\r\n                                >\r\n                                    <Image src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                        style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                    />\r\n                                    <Card.Content>\r\n                                        <Card.Header content={activity.title} textAlign='center' />\r\n                                        <Card.Meta textAlign='center'>\r\n                                            <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                            <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                        </Card.Meta>\r\n                                    </Card.Content>\r\n                                </Card>\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {Tab} from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport ProfileActivities from './ProfileActivities';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile} : Props) {\r\n\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities>Events Content</ProfileActivities>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings/>}\r\n    ] ; // allow us to create menu on right handside and content on left handside\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        >\r\n        </Tab>\r\n    )\r\n})","import { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams } from 'react-router';\r\nimport { useStore } from '../../app/stores/stores';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {\r\n                    profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile}/>\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport {useStore} from '../stores/stores';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest} : Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            // if they login, route them to the route, otherwise, redirect them to home page\r\n            render={(props) => isLoggedIn? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import { Container} from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetail';\nimport TestError from '../../features/errors/TestError';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { ToastContainer } from 'react-toastify';\nimport { useStore } from '../stores/stores';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from '../layout/PrivateRoute';\n\nfunction App() {\n  const {commonStore, userStore} = useStore();\n  const location = useLocation();\n\n  useEffect(()=>{\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route path='/' exact component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <Container>\n              <NavBar />\n              <Container style={{ marginTop: '7em', }}>\n                <Switch>  {/*Use switch so only one route is loaded at a time*/}\n                  <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} exact component={ActivityForm} />\n                  <PrivateRoute path='/activities/:id' exact component={ActivityDetails} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                  <Route path='/errors' exact component={TestError} />\n                  <Route path='/server-error' component={ServerError} />\n                  <Route component={NotFound} />\n                </Switch>\n              </Container>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport {StoreContext, store} from './app/stores/stores';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  // Provide the StoreContext into the app with \"store\" as a value\n  <StoreContext.Provider value={store}>\n    <Router history={history}> {/**Use Router instead of BrowserRouter*/}\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}